// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// convaqCpp
DataFrame convaqCpp(DataFrame df1, DataFrame df2, uint model_num, double cutoff, bool qvalues, uint qvalues_rep, uint nthreads);
RcppExport SEXP _rconvaq_convaqCpp(SEXP df1SEXP, SEXP df2SEXP, SEXP model_numSEXP, SEXP cutoffSEXP, SEXP qvaluesSEXP, SEXP qvalues_repSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df1(df1SEXP);
    Rcpp::traits::input_parameter< DataFrame >::type df2(df2SEXP);
    Rcpp::traits::input_parameter< uint >::type model_num(model_numSEXP);
    Rcpp::traits::input_parameter< double >::type cutoff(cutoffSEXP);
    Rcpp::traits::input_parameter< bool >::type qvalues(qvaluesSEXP);
    Rcpp::traits::input_parameter< uint >::type qvalues_rep(qvalues_repSEXP);
    Rcpp::traits::input_parameter< uint >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(convaqCpp(df1, df2, model_num, cutoff, qvalues, qvalues_rep, nthreads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rconvaq_convaqCpp", (DL_FUNC) &_rconvaq_convaqCpp, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_rconvaq(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
